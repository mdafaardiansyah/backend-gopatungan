pipeline {
    agent {
        label "jenkins-agent"
    }
    tools {
        go 'go1.23.1'
    }
    environment {
        APP_NAME = "gopatungan-backend"
        RELEASE = "1.0.0"
        DOCKER_USER = "ardidafa"
        DOCKER_CREDS = credentials('dockerhub')
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('user-sonarqube-token')
        VPS_HOST = credentials('vps-host-credential')
        VPS_DIR = "/path/to/gopatungan"
        DISCORD_WEBHOOK = credentials('discord-webhook')
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/mdafaardiansyah/backend-gopatungan.git'
            }
        }

        stage("Build Application") {
            steps {
                sh 'go mod tidy'
                sh 'go build -o gopatungan-backend ./cmd/gopatungan'
            }
        }

        stage("Run Tests") {
            steps {
                sh 'go test ./... -v -cover'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonarqube-scanner-latest'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'user-sonarqube-token', installationName: 'sonarqube-scanner') {
                    sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=gopatungan-backend \
                    -Dsonar.sources=. \
                    -Dsonar.go.coverage.reportPaths=coverage.out \
                    -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        def customImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f build/Dockerfile .")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to VPS') {
            steps {
                sshagent(credentials: ['vps-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no your-ssh-username@${env.VPS_HOST} '
                        cd ${env.VPS_DIR}
                        git pull origin main
                        docker-compose up -d --build
                        '
                    """
                }
            }
        }
    }

    post {
       always {
           cleanWs()
       }
       success {
           discordSend (
               webhookURL: DISCORD_WEBHOOK,
               title: "Deployment Successful: ${env.JOB_NAME}",
               description: "Build #${env.BUILD_NUMBER} has completed successfully.",
               footer: "Jenkins Build",
               link: env.BUILD_URL,
               result: currentBuild.currentResult,
               thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png"
           )
       }
       failure {
           discordSend (
               webhookURL: DISCORD_WEBHOOK,
               title: "Deployment Failed: ${env.JOB_NAME}",
               description: "Build #${env.BUILD_NUMBER} has failed. Please check the logs for more information.",
               footer: "Jenkins Build",
               link: env.BUILD_URL,
               result: currentBuild.currentResult,
               thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png"
           )
       }
   }
}