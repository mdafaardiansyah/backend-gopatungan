pipeline {
    agent {
        label "jenkins-agent"
    }
    tools {
        // Install Golang version 1.23.1
        go 'go1.23.1'
    }
    environment {
        APP_NAME = "gopatungan-backend"
        RELEASE = "1.0.0"
        DOCKER_USER = "ardidafa"
        DOCKER_PASS = 'dockerhub' // Use Jenkins credentials for DockerHub password
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/mdafaardiansyah/backend-gopatungan.git'
            }
        }

        stage("Build Application") {
            steps {
                sh 'go mod tidy' // Ensure Go modules are up to date
                sh 'go build -o gopatungan-backend .' // Build Go application
            }
        }

//         stage("Test Application") {
//             steps {
//                 sh 'go test ./...' // Run Go unit tests
//             }
//         }

        stage("SonarQube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') {
                        // Assuming the SonarQube Go plugin is set up
                        sh 'sonar-scanner -Dsonar.projectKey=gopatungan-backend -Dsonar.sources=. -Dsonar.go.coverage.reportPaths=coverage.out'
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image = docker.build("${IMAGE_NAME}")
                    }
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }

        // Optional: Add Trivy scan or other security checks here

        // Optional: Add cleanup for Docker images here
    }

    post {
        success {
            echo "Build succeeded!"
        }
        failure {
            echo "Build failed!"
        }
    }
}
