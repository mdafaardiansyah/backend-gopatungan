pipeline {
    agent {
        label "jenkins-agent"
    }
    tools {
        go 'go1.23.1' // Pastikan Go terinstal
        // Tambahkan alat lain jika diperlukan
    }
    environment {
        APP_NAME = "gopatungan-backend"
        RELEASE = "1.0.0"
        DOCKER_USER = "ardidafa"
        DOCKER_PASS = 'dockerhub' // Gunakan kredensial Jenkins untuk password DockerHub
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('user-sonarqube-token')
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/mdafaardiansyah/backend-gopatungan.git'
            }
        }

        stage("Build Application") {
            steps {
                sh 'go mod tidy' // Pastikan modul Go mutakhir
                sh 'go build -o gopatungan-backend ./cmd/gopatungan' // Membangun aplikasi Go
            }
        }
        //         stage("Test Application") {
        //             steps {
        //                 sh 'go test ./...' // Run Go unit tests
        //             }
        //         }

        stage("SonarQube Analysis") {
            steps {
                script {
                    sh '''
                        docker run --rm \
                            -e SONAR_HOST_URL="https://sonarqube.glanze.site/" \
                            -e SONAR_LOGIN="${SONAR_TOKEN}" \
                            -v "$(pwd):/usr/src" \
                            sonarsource/sonar-scanner-cli \
                            -Dsonar.projectKey=gopatungan-backend \
                            -Dsonar.sources=. \
                            -Dsonar.go.coverage.reportPaths=coverage.out
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image = docker.build("${IMAGE_NAME}")
                    }
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build succeeded!"
        }
        failure {
            echo "Build failed!"
        }
    }
}



