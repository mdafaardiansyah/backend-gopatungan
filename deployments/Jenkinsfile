def getChanges() {
        def changeLogSets = currentBuild.changeSets
        def changes = ""
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                changes += "${entry.commitId.take(7)} ${entry.msg} - ${entry.author}\n"
            }
        }
        return changes ?: "No changes"
    }

pipeline {
    agent {
        label "jenkins-agent"
    }
    tools {
        go 'go1.23.1'
    }
    environment {
        APP_NAME = "gopatungan-backend"
        RELEASE = "1.0.0"
        DOCKER_USER = "ardidafa"
        DOCKER_CREDS = credentials('dockerhub')
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('user-sonarqube-token')
        VPS_HOST = credentials('vps-host-credential')
        VPS_DIR = "/var/www/gopatungan/gopatungan-backend"
        DISCORD_WEBHOOK = credentials('discord-webhook')
        SSH_PASSPHRASE = credentials('passphrase-ssh-github')
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/mdafaardiansyah/backend-gopatungan.git'
            }
        }

        stage("Build Application") {
            steps {
                sh 'go mod tidy'
                sh 'go build -o gopatungan-backend ./cmd/gopatungan'
            }
        }

        stage("Run Tests") {
            steps {
                sh 'go test ./... -v -cover'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonarqube-scanner-latest'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'user-sonarqube-token', installationName: 'sonarqube-scanner') {
                    sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=gopatungan-backend \
                    -Dsonar.sources=. \
                    -Dsonar.go.coverage.reportPaths=coverage.out \
                    -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        def customImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f build/Dockerfile .")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to VPS') {
            steps {
                sshagent(credentials: ['vps-ssh-key']) {
                    withCredentials([
                    usernamePassword(credentialsId: 'passphrase-ssh-github', usernameVariable: '_', passwordVariable: 'SSH_KEY_PASSPHRASE')
                    ]) {
                        sh """
                            ssh -A -v -o StrictHostKeyChecking=no -p 22 ${env.VPS_HOST} '

                             # Menambahkan GitHub ke known_hosts jika belum ada
                            grep -q github.com ~/.ssh/known_hosts || ssh-keyscan github.com >> ~/.ssh/known_hosts

                            # Menjalankan ssh-agent untuk mengelola kunci SSH

                            cd ${env.VPS_DIR}

                            eval `ssh-agent -s`
                            ssh-add ~/.ssh/id_rsa

                            # Memasukkan passphrase sebelum git pull
                            ssh-add - <<< "${SSH_KEY_PASSPHRASE.trim()}"
                            git pull origin main

                            cd build/
                            ls -la ../../configs/  # Untuk debug, melihat isi direktori configs
                            if [ -f "../../configs/.env" ]; then
                                echo ".env file exists"
                                docker compose --env-file ../../configs/.env up -d --build
                            else
                                echo ".env file not found"
                                exit 1
                            fi

                            # Mematikan ssh-agent
                            ssh-agent -k
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                def changes = getChanges()
                def jenkinsVersion = Jenkins.instance.getVersion().toString()
                def discordNotifierVersion = Jenkins.instance.pluginManager.getPlugin("discord-notifier").getVersion()
                discordSend (
                    webhookURL: DISCORD_WEBHOOK,
                    title: "Deploy Success !",
                    description: """**Branch**: ${env.GIT_BRANCH}
                    **Build**: ${env.BUILD_NUMBER}
                    **Status**: ${currentBuild.currentResult.toLowerCase()}
                    **Changes**:
                    ${changes}

                    **Artifacts**:

                    No artifacts saved.

                    """,
                    footer: "Jenkins v${jenkinsVersion}              Discord Notifier v${discordNotifierVersion}",
                    link: env.BUILD_URL,
                    result: currentBuild.currentResult,
                    thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png"
                )
            }
        }
        failure {
            script {
                def changes = getChanges()
                def jenkinsVersion = Jenkins.instance.getVersion().toString()
                def discordNotifierVersion = Jenkins.instance.pluginManager.getPlugin("discord-notifier").getVersion()
                discordSend (
                    webhookURL: DISCORD_WEBHOOK,
                    title: "Deploy Failed !",
                    description: """**Branch**: ${env.GIT_BRANCH}
                    **Build**: ${env.BUILD_NUMBER}
                    **Status**: ${currentBuild.currentResult.toLowerCase()}
                    **Changes**:
                    ${changes}

                    **Artifacts**:

                    No artifacts saved.

                    """,
                    footer: "Jenkins v${jenkinsVersion}                Discord Notifier v${discordNotifierVersion}",
                    link: env.BUILD_URL,
                    result: currentBuild.currentResult,
                    thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png"
                )
            }
        }
    }
}